
/* vim: ft=cpp
 * Local Variables:
 * mode:c++
 * End:
 * ostream
 * Copyright © 2010 François-Xavier 'Bombela' Bourlet <bombela@gmail.com>
 *
*/

#pragma once
#ifndef OSTREAM_H
#define OSTREAM_H

#include <kernel/std/ios>
#include <kernel/std/streambuf>
#include <kernel/console.h>
#include <kernel/std/formatter.hpp>
#include <attributes.h>

#include KERNEL_STD_OSTREAM_DEBUG
#include KERNEL_STD_OSTREAM_CHECK

namespace kernel {
namespace std {

UNUSED static struct ostream_endl { } endl;

class ostream: public ios
{
	public:
		ostream(const ostream& from) = delete;
		ostream& operator=(const ostream& from) = delete;
		
		~ostream() {
#ifdef DEBUG_ON
			if (main_console)
				main_console->write("ostream destruction\n");
#endif
		}
		
#ifndef DEBUG_ON
		constexpr
#endif
			ostream(streambuf* sb): ios(sb) {
#ifdef DEBUG_ON
			if (main_console)
				main_console->write("ostream initialization\n");
#endif
		}

		inline ostream& operator<<(char c) {
			assert(_streambuf != 0);
			if (flags.ischaralpha())
				_streambuf->write(c);
			else
				*this << static_cast<int>(c);
			return *this;
		}
		inline ostream& operator<<(const char* s) {
			assert(_streambuf != 0);
			_streambuf->write(s);
			return *this;
		}
		inline std::ostream& operator<<(const ostream_endl&) {
			assert(_streambuf != 0);
			return (*this) << '\n';
		}

		template <typename T, typename... Args>
			ostream& print(const char* fmt, const T& arg1, const Args&... args) {
				return formatter::print(*this, fmt, args...);
			}
		
		template <typename... Args>
			ostream& operator()(const char* fmt, const Args&... args) {
				return formatter::print(*this, fmt, args...);
			}

		ostream& operator<<(int);
		ostream& operator<<(unsigned int);
		ostream& operator<<(long int);
		ostream& operator<<(unsigned long int);
		
		// attention à celui là, lire le this->flags.ischaralpha
		// pour le printer en temps que char simple, sinon le printer
		// en temps que unsigned int.
		// ex:
		//	if (flags.ischaralpha())
		//		*this << static_cast<char>(c);
		//	else
		//		*this << static_cast<unsigned int>(c);
		// inline std::ostream& operator<<(unsigned char);
		
		// même chose que précédemment, penser au boolalpha.
		// inline std::ostream& operator<<(bool);
		
		// bon puisque vous insistez,
		// et que vous êtes des chauds de la bittes :P
		// inline std::ostream& operator<<(float);
		// inline std::ostream& operator<<(double);
};

} // namespace std
} // namespace kernel

#include <check_off.h>
#include <debug_off.h>

#endif /* OSTREAM_H */
