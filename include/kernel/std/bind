/* vim: ft=cpp
 * bind
 * Copyright © 2010 François-Xavier 'Bombela' Bourlet <bombela@gmail.com>
 *
*/

#pragma once
#ifndef BIND_H
#define BIND_H

#include <kernel/std/bits/config.h>
#include <kernel/std/autofun>
#include <kernel/std/ref>
#include <kernel/std/forward>
#include <kernel/std/memfn>

namespace std {
namespace kernel_std {

namespace placeholder {

template <int I>
struct arg {
	static const int value = I;
	arg() {}
};

template <typename T>
struct is_placeholder {
	static const int value = 0;
};

template <int I>
struct is_placeholder<arg<I>> {
	static const int value = I;
};

} // namespace placeholder

namespace placeholder_defs {
	
static const placeholder::arg<1> _1;
static const placeholder::arg<2> _2;
static const placeholder::arg<3> _3;
static const placeholder::arg<4> _4;
static const placeholder::arg<5> _5;
static const placeholder::arg<6> _6;
static const placeholder::arg<7> _7;
static const placeholder::arg<8> _8;
static const placeholder::arg<9> _9;

} // namespace placeholder_defs

namespace details {
	
template <typename F>
	struct unwrapper
	{
		static const F& unwrap(const F& f) { return f; }
	};

template <typename F>
	struct unwrapper<ref_wrapper<F>>
	{
		static F& unwrap(ref_wrapper<F> w) { return static_cast<F&>(w); }
	};

template <typename... Args>
	struct storage;

template <int I, typename T, typename... Args2>
	struct storage_getter;

template <typename T, typename... Args, typename... Args2>
	struct storage_getter<0, storage<T, Args...>, Args2...>
	{
		static AUTO_FUN( get(const storage<T, Args...>& s) ) ( s.arg )
	};

template <int I, typename T, typename... Args, typename... Args2>
	struct storage_getter<I, storage<T, Args...>, Args2...>:
	storage_getter<I - 1, storage<Args...>, Args2...> {};

template<unsigned... Indices>
	struct invoke_helper
	{
		template <typename F, typename... Args, typename... Args2>
			static auto invoke(const F& f,
					UNUSED const storage<Args...>& s,
					Args2&&... args2)
			-> decltype(
				unwrapper<F>::unwrap(f)
					(storage_getter<Indices,
					 storage<Args...>, Args2...>::get(s)...)
					)
			{
				return unwrapper<F>::unwrap(f)
					(storage_getter<Indices,
					 storage<Args...>, Args2...>::get(s)...);
			}
	}; 

template<unsigned N, unsigned... A> 
	struct invoke_helper_generator:
		invoke_helper_generator<N - 1, A..., sizeof...(A)> { };

template<unsigned... A> 
	struct invoke_helper_generator<0, A...> {
		typedef invoke_helper<A...> type;
	};

template <>
	struct storage<> {};

template <typename T, typename... Args>
	struct storage<T, Args...>: storage<Args...>
	{
		T arg;
		storage(T&& arg, Args&&... args):
			storage<Args...>(forward<Args>(args)...),
			arg(forward<T>(arg)) {}
	};

/*template <int I, typename... Args>
	struct storage<placeholder::arg<I>, Args...>: storage<Args...>
	{
		typedef placeholder::arg<I> A1;

		storage(A1, const Args&... args):
			storage<Args...>(args...) {}

		template <typename F, typename... Args2>
			AUTO_FUN( operator() (F f) )
			(
			 details::unwrapper<F>::unwrap(f)()
			)
	};*/

} // namespace details

template <typename F, typename... Args>
struct bind_impl: private details::storage<Args...>
{
	typedef typename
		details::invoke_helper_generator<sizeof...(Args)>::type invoker;

	bind_impl(F f, Args&&... args):
		details::storage<Args...>(forward<Args>(args)...),
		f(f) {}

	auto operator()() const
		-> decltype(
				invoker::invoke(*(F*)0,
					static_cast<const details::storage<Args...>&>(
						*(bind_impl*)0
						)
					)
		)
	{
		return invoker::invoke(f,
				static_cast<const details::storage<Args...>&>(*this)
				);
	}

private:
	F f;
};

} // namespace kernel_std
} // namespace std

using namespace std::kernel_std::placeholder_defs;

#endif /* BIND_H */
