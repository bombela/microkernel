/* vim: ft=cpp
 * bind
 * Copyright © 2010 François-Xavier 'Bombela' Bourlet <bombela@gmail.com>
 *
*/

#pragma once
#ifndef BIND_H
#define BIND_H

#include <kernel/std/bits/config.h>
#include <kernel/std/autofun>
#include <kernel/std/ref>
#include <kernel/std/forward>
#include <kernel/std/move>
#include <kernel/std/memfn>

namespace std {
namespace kernel_std {

namespace details {
	
template <typename...>
	struct pack {};

} // namespace details

namespace placeholder {

template <unsigned I>
	struct arg {
		constexpr arg() {}
		arg(const arg&) = delete;
		arg(arg&&) = delete;
	};

namespace details {

template <typename T>
	struct is_placeholder {
		static const bool value = false;
	};

template <unsigned I>
	struct is_placeholder<arg<I>> {
		static const bool value = true;
	};

} // namespace details

template <typename T>
struct is_placeholder:
	details::is_placeholder<typename decay<T>::type> {};

template <typename... Args>
	struct count;

template <>
	struct count<> {
		static const unsigned value = 0;
	};

template <typename T, typename... Args>
	struct count<T, Args...> {
		static const unsigned value =
			count<Args...>::value + (is_placeholder<T>::value ? 1 : 0);
	};

namespace details {
	
template <typename... Args>
	struct max;

template <>
	struct max<> {
		static const unsigned value = 0;
	};

template <unsigned I, typename... Args>
	struct max< arg<I>, Args... > {
		static const unsigned tailmax = max< Args... >::value;
		static const unsigned value = (tailmax > I) ? tailmax : I;
	};

template <typename T, typename... Args>
	struct max< T, Args... >: max<Args...> {};

} // namespace details

template <typename... Args>
	struct max: details::max<typename remove_const<Args>::type...> {};

namespace details {

template<unsigned I, typename... Args>
	struct contain;

template<unsigned I>
	struct contain<I> {
		static const bool value = false;
	};

template<unsigned I, typename... Args>
	struct contain< I, arg<I>, Args... > {
		static const bool value = true;
	};

template<unsigned I, typename T, typename... Args>
	struct contain< I, T, Args... >: contain<I, Args...> {};

} // namespace details

template<unsigned I, typename... Args>
	struct contain:
		details::contain<I, typename remove_const<Args>::type...> {};

namespace details {
	
template<unsigned N, typename... Args>
struct rangechecker: rangechecker<N - 1, Args...> {

	static const bool is_contained = placeholder::contain<N, Args...>::value;
	static_assert(is_contained,
			"Placeholder(s) missing! "
			"(eg: if you use _3, you must also use _1 and _2).");
};

template<typename... Args>
	struct rangechecker<0, Args...> {};

} // namespace details

template <typename... Args>
struct fillrangecheck
{
	static const unsigned max = max<Args...>::value;
	typedef details::rangechecker<max, Args...> check;
};

/*
4, int, 2, float, 2, 2, 3

1, 2, 3, 4
^


*/

} // namespace placeholder

namespace placeholder_defs {
	
static const placeholder::arg<1> _1;
static const placeholder::arg<2> _2;
static const placeholder::arg<3> _3;
static const placeholder::arg<4> _4;
static const placeholder::arg<5> _5;
static const placeholder::arg<6> _6;
static const placeholder::arg<7> _7;
static const placeholder::arg<8> _8;
static const placeholder::arg<9> _9;

} // namespace placeholder_defs

namespace details {
	
template <typename F>
	struct unwrapper
	{
		static const F& unwrap(const F& f) { return f; }
	};

template <typename F>
	struct unwrapper<ref_wrapper<F>>
	{
		static F& unwrap(ref_wrapper<F> w) { return static_cast<F&>(w); }
	};

template <unsigned I, typename... Args>
	struct arg_getter;

template <typename T, typename... Args>
	struct arg_getter<1, T, Args...> {
		static T&& get(T&& a, Args&&...) {
			return forward<T>(a);
		}
	};

template <unsigned I, typename T, typename... Args>
	struct arg_getter<I, T, Args...> {
		static AUTO_FUN ( get(T&&, Args&&... args) )
			(
			 arg_getter<I - 1, Args...>::get(
				 forward<Args>(args)...
				 )
			)
	};

template <typename... Args>
	struct storage;

template <int I, typename T, typename... Args2>
	struct storage_getter;

template <typename T, typename... Args, typename... Args2>
	struct storage_getter<0, storage<T, Args...>, Args2...>
	{
		static AUTO_FUN( get(const storage<T, Args...>& s, Args2&&...) )
			(
			 s.arg
			)
	};

template <unsigned I, typename... Args, typename... Args2>
	struct storage_getter<0,
		storage< placeholder::arg<I> , Args...>, Args2...>
	{
		static AUTO_FUN( get(const storage<placeholder::arg<I>, Args...>&,
					Args2&&... args2) )
			(
			 arg_getter<I, Args2...>::get(forward<Args2>(args2)...)
			)
	};

template <unsigned I, typename... Args, typename... Args2>
	struct storage_getter<0,
		storage< const placeholder::arg<I> , Args...>, Args2...>
	{
		static AUTO_FUN( get(const storage<const placeholder::arg<I>, Args...>&,
					Args2&&... args2) )
			(
			 arg_getter<I, Args2...>::get(forward<Args2>(args2)...)
			)
	};

template <int I, typename T, typename... Args, typename... Args2>
	struct storage_getter<I, storage<T, Args...>, Args2...>:
	storage_getter<I - 1, storage<Args...>, Args2...> {};

template<unsigned... Indices>
	struct invoke_helper
	{
		template <typename F, typename Args, typename Args2>
			struct invoke_dispatcher;
	}; 

template <unsigned... Indices>
	template <typename F, typename... Args, typename... Args2>
	struct invoke_helper<
		Indices...>::invoke_dispatcher<F, details::pack<Args...>,
		details::pack<Args2...>>
	{
		static_assert(!(sizeof...(Args2) < placeholder::max<Args...>::value),
				"Not enough arguments !");
		static_assert(!(sizeof...(Args2) > placeholder::max<Args...>::value),
				"To much arguments !");

		typedef decltype(
				unwrapper<F>::unwrap(*(F*)0)
				(
				 storage_getter<Indices,
					storage<Args...>, Args2...>::get(*(storage<Args...>*)0,
					   forward<Args2>(*(typename remove_ref<Args2>::type*)0)...)
					...
					)
				) return_t;

		template <typename... Args3>
			static auto invoke(const F& f,
					UNUSED const storage<Args...>& s,
					Args3&&... args2) -> return_t
			{
				return unwrapper<F>::unwrap(f)
					(
					 storage_getter<Indices,
					 storage<Args...>, Args3...>::get(s,
						 forward<Args3>(args2)...)...
					);
			}
	};

template<unsigned N, unsigned... A> 
	struct invoke_helper_generator:
		invoke_helper_generator<N - 1, A..., sizeof...(A)> { };

template<unsigned... A> 
	struct invoke_helper_generator<0, A...> {
		typedef invoke_helper<A...> type;
	};

template <>
	struct storage<> {};

template <typename T, typename... Args>
	struct storage<T, Args...>: storage<Args...>
	{
		typename remove_ref<T>::type arg;
		
		template <typename T2, typename... Args2>
			explicit storage(UNUSED T2&& arg, Args2&&... args):
				storage<Args...>(forward<Args2>(args)...),
				arg(forward<T2>(arg)) {}
		
		// gcc-4.6 (GCC) 4.6.0 20110205 (experimental)
		// overload error with the code under...
	
		/*explicit storage(const storage& o):
			storage<Args...>(o),
			arg(o.arg) {}*/

		/*explicit storage(storage&& o):
			storage<Args...>(std::move(o)),
			arg(std::move(o.arg)) {}*/
	};

template <unsigned I, typename... Args>
	struct storage<placeholder::arg<I>, Args...>: storage<Args...>
	{
		template <typename... Args2>
			explicit storage(const placeholder::arg<I>&, Args2&&... args):
				storage<Args...>(forward<Args2>(args)...) {}
	};

template <unsigned I, typename... Args>
	struct storage<const placeholder::arg<I>, Args...>: storage<Args...>
	{
		template <typename... Args2>
			explicit storage(const placeholder::arg<I>&, Args2&&... args):
				storage<Args...>(forward<Args2>(args)...) {}
	};

template <typename F, typename... Args>
struct bind_base: protected storage<Args...>
{
	template <typename F2, typename... Args2>
		explicit bind_base(F2&& f, Args2&&... args):
			storage<Args...>(forward<Args2>(args)...),
			f(forward<F2>(f)) {}
	
	// gcc-4.6 (GCC) 4.6.0 20110205 (experimental)
	// overload error with the code under...

	/*explicit bind_base(const bind_base& o):
		storage<Args...>(o),
		f(o.f) {}*/
	
	/*bind_base(bind_base&& o):
		storage<Args...>(move(o)),
		f(move(o.f)) {}*/

	F f;
};

template <unsigned NP, typename F, typename... Args>
struct bind_functor: bind_base<F, Args...>
{
	typedef typename
		invoke_helper_generator<sizeof...(Args)>::type invoker;

	template <typename F2, typename... Args2>
		bind_functor(F2&& f, Args2&&... args):
			details::bind_base<F, Args...>(
					forward<F2>(f), forward<Args2>(args)...) {}

	template <typename... Args2>
		auto operator()(Args2&&... args2) const
		-> typename invoker::
		template invoke_dispatcher<F, details::pack<Args...>,
				 details::pack<Args2...>> ::return_t
		{
			return invoker::
				template invoke_dispatcher<F, details::pack<Args...>,
			details::pack<Args2...>>::invoke(this->f,
						static_cast<const storage<Args...>&>(*this)
						,forward<Args2>(args2)...
						);
		}
};

} // namespace details

template <typename F, typename... Args>
struct bind_impl:
	details::bind_functor<placeholder::count<Args...>::value, F, Args...>
{
	static const typename placeholder::fillrangecheck<Args...>::check
		_fillrangecheck;
	static const unsigned NP = placeholder::count<Args...>::value;

	template <typename F2, typename... Args2>
		explicit bind_impl(F2&& f, Args2&&... args):
			details::bind_functor<NP, F, Args...>(
					forward<F2>(f), forward<Args2>(args)...) {}
};

template <typename F, typename... Args>
AUTO_FUN( bind(F&& f, Args&&... args) )
	( bind_impl<
	  typename remove_ref<F>::type,
	  typename remove_ref<Args>::type...>(
		  forward<F>(f), forward<Args>(args)...) )

/*
template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...), Args&&... args) )
	( bind(storepmf_mem_fn(f), forward<Args>(args)...) )

template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const, Args&&... args) )
	( bind(storepmf_mem_fn(f), forward<Args>(args)...) )
*/

namespace bind_mem_fn {

template <typename R, typename T, typename PMF, typename PF>
	struct mem_fn_base
	{
		typedef PMF pmf_t;
		typedef PF  pf_t;

		constexpr mem_fn_base(pmf_t pmf, T* obj):
			pf( (pf_t)(obj->*pmf) ), obj(obj) {}

		template <typename... Args2>
			R operator()(Args2&&... args) const {
				return pf(obj, forward<Args2>(args)...);
			}

		const pf_t pf;
		T* const obj;
	};

template <typename R, typename T, typename PMF, typename PF>
	struct mem_fn_base_rvalue
	{
		typedef PMF pmf_t;
		typedef PF  pf_t;

		constexpr mem_fn_base_rvalue(pmf_t pmf, T&& obj):
			pf( (pf_t)(obj.*pmf) ), obj(forward<T>(obj)) {}

		template <typename... Args2>
			R operator()(Args2&&... args) const {
				return pf(&obj, forward<Args2>(args)...);
			}

		const pf_t pf;
		T obj;
	};

template <template <typename, typename, typename, typename> class SUPER,
		 typename F> struct mem_fn_impl;

template <template <typename, typename, typename, typename> class SUPER,
		 typename R, typename T, typename... Args>
	struct mem_fn_impl<SUPER, R (T::*)(Args...)>:
		SUPER<R, T,
			R (T::*)(Args...),
			R (*)(T*, Args...)>
	{
		typedef
			SUPER<R, T,
				R (T::*)(Args...),
				R (*)(T*, Args...)>
		base_t;
		typedef typename base_t::pmf_t pmf_t;

		constexpr mem_fn_impl(pmf_t pmf, T* obj):
			base_t(pmf, obj) {}
		constexpr mem_fn_impl(pmf_t pmf, T&& obj):
			base_t(pmf, obj) {}
	};

template <template <typename, typename, typename, typename> class SUPER,
		 typename R, typename T, typename... Args>
	struct mem_fn_impl<SUPER, R (T::*)(Args...) const>:
		SUPER<R, const T,
			R (T::*)(Args...) const,
			R (*)(const T*, Args...)>
	{
		typedef
			SUPER<R, const T,
				R (T::*)(Args...) const,
				R (*)(const T*, Args...)>
			base_t;
		typedef typename base_t::pmf_t pmf_t;

		constexpr mem_fn_impl(pmf_t pmf, const T* obj):
			base_t(pmf, obj) {}
		constexpr mem_fn_impl(pmf_t pmf, T&& obj):
			base_t(pmf, forward<T>(obj)) {}
	};

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...), T& obj) )
(
	mem_fn_impl<mem_fn_base, R (T::*)(Args...)>(pmf, &obj)
)

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...), T* obj) )
(
	mem_fn_impl<mem_fn_base, R (T::*)(Args...)>(pmf, obj)
)

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...) const, const T& obj) )
(
	mem_fn_impl<mem_fn_base, R (T::*)(Args...) const>(pmf, &obj)
)

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...) const, T&& obj) )
(
	mem_fn_impl<mem_fn_base_rvalue, R (T::*)(Args...) const>
	(pmf, forward<T>(obj))
)

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...) const, const T* obj) )
(
	mem_fn_impl<mem_fn_base, R (T::*)(Args...) const>(pmf, obj)
)

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...), ref_wrapper<T> ref) )
(
	mem_fn(pmf, &static_cast<T&>(ref))
)

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...) const, ref_wrapper<T> ref) )
(
	mem_fn(pmf, &static_cast<T&>(ref))
)

template <typename R, typename T, typename... Args>
AUTO_FUN( mem_fn (R (T::*pmf)(Args...) const, ref_wrapper<const T> ref) )
(
	mem_fn(pmf, &static_cast<T&>(ref))
)

// first arg is not a placeholder (so should be an object ref/ptr)
// use bind_mem_fn::mem_fn
template <bool, typename PMF>
struct selector_impl {

	// hack to go over gcc (gcc-4.6 (GCC) 4.6.0 20110205 (experimental)) bugs
	template <bool A1isRVALUE, typename A1, typename... Args>
		struct return_t;

	template <typename A1, typename... Args>
		static auto bind(PMF f, A1&& a1, Args&&... args)
		-> typename return_t<
				is_rvalue<decltype(a1)>::value,
				typename remove_ref<A1>::type,
				typename remove_ref<Args>::type...
					>::type
		{
			return kernel_std::bind( bind_mem_fn::mem_fn(f, forward<A1>(a1))
						, forward<Args>(args)...);
		}
};

template <bool B, typename PMF>
template <typename A1, typename... Args>
struct selector_impl<B, PMF>::return_t<false, A1, Args...> {
	typedef decltype(
			kernel_std::bind(
				bind_mem_fn::mem_fn(*(PMF*)0, (*(A1*)0))
				, forward<Args>(*(Args*)0)...
				)
			) type;
};

template <bool B, typename PMF>
template <typename A1, typename... Args>
struct selector_impl<B, PMF>::return_t<true, A1, Args...> {
	typedef decltype(
			kernel_std::bind(
				bind_mem_fn::mem_fn(*(PMF*)0, forward<A1>(*(A1*)0))
				, forward<Args>(*(Args*)0)...
				)
			) type;
};

// first arg is a placeholder, use storepmf_mem_fn
template <typename PMF>
struct selector_impl<true, PMF> {

	// hack to go over gcc (gcc-4.6 (GCC) 4.6.0 20110205 (experimental)) bugs
	template <typename... Args>
		struct return_t {
			typedef decltype(
					kernel_std::bind(
						storepmf_mem_fn(*(PMF*)0),
						forward<Args>(*(Args*)0)...)
					) type;
		};

	template <typename... Args>
		static auto bind(PMF f, Args&&... args)
		-> typename return_t<
			typename remove_ref<Args>::type...
			>::type
		{
			return kernel_std::bind(storepmf_mem_fn(f), forward<Args>(args)...);
		}
};

// use storepmf_mem_fn if a placeholder is given
// use bind_mem_fn::mem_fn if an object is given
template <typename T, typename PMF>
struct selector: selector_impl<placeholder::is_placeholder<T>::value, PMF> {};

} // namespace bind_mem_fn

template <typename R, typename T, typename A1,
		 typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...), A1&& a1, Args&&... args) )
	( bind_mem_fn::selector<A1, R (T::*)(Args2...)>::bind(f,
									 forward<A1>(a1), forward<Args>(args)...) )

template <typename R, typename T, typename A1,
		 typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const, A1&& a1, Args&&... args) )
	( bind_mem_fn::selector<A1, R (T::*)(Args2...) const>::bind(f,
									 forward<A1>(a1), forward<Args>(args)...) )

/*
template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...), T& o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(f, o), forward<Args>(args)...) )

template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const, T& o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(f, o), forward<Args>(args)...) )

	template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const, const T& o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(f, o), forward<Args>(args)...) )

template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const, T&& o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(f, o), forward<Args>(args)...) )



template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...), T* o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(f, o), forward<Args>(args)...) )

template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const, T* o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(f, o), forward<Args>(args)...) )

template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const, const T* o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(f, o), forward<Args>(args)...) )*/



/*template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...), const ref_wrapper<T>& o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(&static_cast<R (T::*f)(Args2...)>(f), o),
		   forward<Args>(args)...) )*/

/*template <typename R, typename T, typename... Args2, typename... Args>
AUTO_FUN( bind(R (T::*f)(Args2...) const,
			const ref_wrapper<const T>& o, Args&&... args) )
	( bind(bind_mem_fn::mem_fn(&static_cast<R (T::*f)(Args2...) const>(f), o),
		   forward<Args>(args)...) )*/

} // namespace kernel_std
} // namespace std

using namespace std::kernel_std::placeholder_defs;

#endif /* BIND_H */
