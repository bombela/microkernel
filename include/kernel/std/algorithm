/* vim: ft=cpp
 * algo.hpp
 * Copyright © 2010 François-Xavier 'Bombela' Bourlet <bombela@gmail.com>
 *
*/

#pragma once
#ifndef ALGO_H
#define ALGO_H

#include <kernel/std/bits/config.h>
#include <kernel/std/range>
#include <kernel/std/forward>

#ifndef USER_EXTERNAL_STL
#include <kernel/types.h>
#endif

namespace std {
namespace kernel_std {

template <typename IT, typename T>
	void fill(IT first, IT last, const T& value)
	{
		while (first != last)
			*first++ = value;
	}

template <typename C, typename T>
	void fill(C& container, const T& value)
	{
		fill(begin(container), end(container), value);
	}

template <typename IT1, typename IT2>
	void copy(IT1 first, IT1 last, IT2 out)
	{
		while (first != last)
			*out++ = *first++;
	}

template <typename C1, typename C2>
	void copy(const C1& src, C2& out)
	{
		copy(begin(src), end(src), begin(out));
	}

template <typename A, typename B>
	auto max(A&& a, B&& b) -> decltype(a > b
			? kernel_std::forward<A>(a)
			: kernel_std::forward<B>(b)
			)
	{
		return (a > b)
			? kernel_std::forward<A>(a)
			: kernel_std::forward<B>(b);
	}

template <typename A, typename B>
	auto min(A&& a, B&& b) -> decltype(a < b
			? kernel_std::forward<A>(a)
			: kernel_std::forward<B>(b)
			)
	{
		return (a < b)
			? kernel_std::forward<A>(a)
			: kernel_std::forward<B>(b);
	}

template <typename IT, typename P>
	IT find_if(IT first, IT last, P pred)
	{
		while (first != last)
			if (pred(*first++))
				return first;
		return last;
	}

template <typename C, typename P>
	auto find_if(C& container, P pred) -> decltype(
			find_if(begin(container), end(container), pred)
			)
	{
		return find_if(begin(container), end(container), pred);
	}

} // namespace kernel_std
} // namespace std

#endif /* ALGO_H */
