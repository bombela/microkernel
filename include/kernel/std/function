/* vim: ft=cpp
 * function
 * Copyright © 2011, François-Xavier 'Bombela' Bourlet <bombela@gmail.com>
 *
*/

#pragma once
#ifndef FUNCTION_H
#define FUNCTION_H

#include <kernel/std/bits/config.h>
#include <kernel/std/autofun>
#include <kernel/std/forward>
#include <kernel/std/memfn>
#include <kernel/std/bind>
#include <new>
#include <enable_if.hpp>

#include KERNEL_STD_FUNCTION_DEBUG
#include KERNEL_STD_FUNCTION_CHECK

namespace std {
namespace kernel_std {

namespace details {

struct dumb { void f(); };

static const unsigned minsize
	= sizeof (bind(&dumb::f, *(dumb*)0));

} // namespace details

template <typename S, unsigned SIZE = details::minsize>
	struct function;

namespace details {

template <typename F>
struct is_function {
	static const bool value = false;
};

template <typename S, unsigned SIZE>
struct is_function<function<S, SIZE>> {
	static const bool value = true;
};

} // namespace details

template <typename F>
struct is_function:
	details::is_function<typename decay<F>::type> {};

template <typename R, unsigned SIZE, typename... Args>
	struct function<R (Args...), SIZE>
	{
		typedef R (*PF)(const void*, Args...);

		function(): _f(0) {}
		function(const function& from) = default;
		function(function&& from) = default;
		function& operator=(const function& from) = default;
		function& operator=(function&& from) = default;
		
		function& assign(const function& from) {
			return this->operator=(from);
		}

		inline operator bool() const { return _f != 0; }

		template <typename F>
			explicit function(F&& f,
					typename enable_if<
						not is_function<F>::value, void*>::type = 0
					): _f(&holder<F>::call)
			{
				static_assert(SIZE >= sizeof (holder<F>),
						"function to hold too big for the holder! "
						"Use a bigger sized function");
				new (_data) holder<F>(forward<F>(f));
			}
		
		template <typename F>
			function& operator=(F&& f)
			{
				static_assert(SIZE >= sizeof (holder<F>),
						"function to hold too big for the holder! "
						"Use a bigger sized function");
				_f = &holder<F>::call;
				new (_data) holder<F>(forward<F>(f));
				return *this;
			}
		
		auto operator()(Args... args) const
		-> decltype(
				(*(PF*)0)(0, (*(typename remove_ref<Args>::type*)0)...)
				)
		{
			assert(this->_f != 0);
			return this->_f(this->_data, args...);
		}
		
		template <typename F>
			struct holder
			{
				template <typename F2>
					holder(F2&& f): f(forward<F2>(f)) {}

				inline R docall(Args... args) const
				{
					return this->f(args...);
				}

				static R call(const void* h, Args... args)
				{
					return static_cast<const holder*>(h)
						->docall(args...);
				}

				typename remove_ref<F>::type f;
			};

		PF   _f;
		char _data[SIZE];
	};

} // namespace kernel_std
} // namespace std

#include <check_off.h>
#include <debug_off.h>

#endif /* FUNCTION_H */
